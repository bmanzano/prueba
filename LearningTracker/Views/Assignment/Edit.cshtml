@model LearningTracker.Models.EditAssignedCourseViewModels

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>EditAssignmentViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            <label class="control-label">
                Asignación
            </label>
            <h4 class="text-success">
                @Model.Course.Name -> @Model.Individual.Name (@Model.AssignmentDate.Value.ToShortDateString())
            </h4>
        </div>
        <div class="form-group">
            @{
                var selected = "";
                if (Model.IsCompleted)
                {
                    selected = "checked";
                }
            }
            @Html.LabelFor(model => model.IsCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="[ form-group ]">
                    <input type="checkbox" name="IsCompleted" id="IsCompleted" autocomplete="off" @selected value="true" />
                    <div class="[ btn-group ]">
                        <label for="IsCompleted" class="[ btn btn-primary ]">
                            <span class="[ glyphicon glyphicon-ok ]"></span>
                            <span> </span>
                        </label>
                        <label for="IsCompleted" class="[ btn btn-default active ]">
                            Activo
                        </label>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.IsCompleted, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FinishDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FinishDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.FinishDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TotalHours, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalHours, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalHours, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.IndividualId)
        @Html.HiddenFor(model => model.CourseId)
        @Html.HiddenFor(model => model.AssignmentDate)

        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @ViewBag.ErrorMessage
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        //scopes public y private
        //module pattern
        var newAssignment = (function () {
            //privado
            //este método si es accesible
            var start = function () {
                //Se puede poner en el layout
                Globalize.culture("es-MX"); //Not sure that it's your locale, maby you need other
                $.validator.methods.date = function (value, element) {
                    return this.optional(element) || Globalize.parseDate(value);
                    /*if ($.browser.webkit) {
                        //ES - Chrome does not use the locale when new Date objects instantiated:
                        var d = new Date();
                        return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                    }
                    else {
                        return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                    }*/
                };
                $('.datepicker').datepicker({
                    format: 'dd/mm/yyyy',
                    language: 'es-MX',
                    autoclose: true
                });

            }
            //Este método no está accesible
            var doSave = function(){

            }
            //público
            return {
                start:start
            }
        })();

        $(function () {
            var module = newAssignment;
            module.start();
        });

    </script>
}
